#!/bin/bash
#
# miscellaneous functions that don't belong anywhere else


# aws-panopticon - Run command on multiple AWS Accounts
#
# Reads AWS Account IDs from STDIN
# Assumes an IAM Role on each account and runs command given as arguments
#
aws-panopticon() {
  local aws_account_ids="$(__bma_read_inputs)"
  local cmd=$@
  local assumed_role_name="${AWS_PANOPTICON_ROLE_NAME:-SecurityAuditor}"
  [[ -z "${aws_account_ids}" ]] && __bma_usage "cmd # pipe in AWS_ACCOUNT_IDS" && return 1

  echo "#command=${cmd}"
  echo "#"

  for aws_account_id in $aws_account_ids; do
    local assumed_env=$(sts-assume-role "arn:aws:iam::${aws_account_id}:role/${assumed_role_name}")
    [[ -z "$assumed_env" ]] && continue # AWSCLI prints error if assuming role fails
    local aws_account_alias="$(export $assumed_env && aws-account-alias)"
    echo "#account=$aws_account_id alias=${aws_account_alias}"
    if ! output=$(export $assumed_env && eval "$cmd"); then
      : # something went wrong
    fi
    [ -z "$output" ] || printf '%s\n\n' "${output%$'\n'}"
  done
}

# columnise(): Handy function to columnise output
#
# Leaving the command itself in functions (for now) to be explicit but
# I'm finding it handy to have this function at the CLI for formatting
# output from commands run in a loop.
#
# Looped commands (such as those with multiple resources piped in) do
# not delay output by sending the aggregate through `column`.
#
columnise() {
  column -s$'\t' -t
}

regions() {
  aws ec2 describe-regions           \
    --query "Regions[].[RegionName]" \
    --output text                    | 
  sort
}

region-each() {
  local old_aws_default_region="$AWS_DEFAULT_REGION"
  for AWS_DEFAULT_REGION in $(regions); do
    eval "$@" | sed "s/$/ #${AWS_DEFAULT_REGION}/"
  done
  AWS_DEFAULT_REGION="$old_aws_default_region"
}

region() {
  local inputs=$(__bma_read_inputs $@)
  if [[ -z "$inputs" ]]; then
    echo "${AWS_DEFAULT_REGION:-'AWS_DEFAULT_REGION not set'}"
  else
    AWS_DEFAULT_REGION="$inputs"
  fi
}

aws-account-alias() {
  aws iam list-account-aliases \
    --query AccountAliases     \
    --output text
}

